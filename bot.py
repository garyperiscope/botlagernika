import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from config import BOT_TOKEN, supabase
from database import save_user, get_user, update_user

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# üîπ –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"), KeyboardButton(text="‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="‚ÑπÔ∏è –û –ª–∞–≥–µ—Ä–µ")]
    ],
    resize_keyboard=True
)

# üîπ –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.\n\n"
        "–ù–∞–ø–∏—à–∏: –ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è, –ò–º—è —Ä–µ–±–µ–Ω–∫–∞, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î), –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã",
        reply_markup=menu_keyboard
    )

# üîπ –•—ç–Ω–¥–ª–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@dp.message()
async def save_user_data(message: types.Message):
    if "," in message.text:
        try:
            data = message.text.split(",")
            parent_name, child_name, birth_date, attended_shifts = map(str.strip, data)

            save_user(parent_name, child_name, birth_date, attended_shifts)
            await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                                 f"üë®‚Äçüë©‚Äçüëß –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                                 f"üë∂ –†–µ–±–µ–Ω–æ–∫: {child_name}\n"
                                 f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}\n"
                                 f"üèï –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã: {attended_shifts}")
        except Exception:
            await message.answer("‚ö† –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: –ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è, –ò–º—è —Ä–µ–±–µ–Ω–∫–∞, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î), –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã")

# üîπ –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /check (–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö)
@dp.message(lambda message: message.text == "üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def check_user_data(message: types.Message):
    parent_name = message.from_user.full_name  # –ë–µ—Ä—ë–º –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è –∫–∞–∫ username
    user_data = get_user(parent_name)

    if user_data:
        data = user_data[0]
        response = (f"üìå –î–∞–Ω–Ω—ã–µ:\n\n"
                    f"üë®‚Äçüë©‚Äçüëß –†–æ–¥–∏—Ç–µ–ª—å: {data['parent_name']}\n"
                    f"üë∂ –†–µ–±–µ–Ω–æ–∫: {data['child_name']}\n"
                    f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birth_date']}\n"
                    f"üèï –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã: {data['attended_shifts']}")
    else:
        response = "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –∏—Ö –∑–∞–Ω–æ–≤–æ."

    await message.answer(response)

# üîπ –•—ç–Ω–¥–ª–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@dp.message(lambda message: message.text == "‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def update_user_data(message: types.Message):
    await message.answer("üîÑ –í–≤–µ–¥–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è, –ò–º—è —Ä–µ–±–µ–Ω–∫–∞, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î), –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã")

@dp.message()
async def update_data(message: types.Message):
    if "," in message.text:
        try:
            data = message.text.split(",")
            parent_name, child_name, birth_date, attended_shifts = map(str.strip, data)

            update_user(parent_name, {"child_name": child_name, "birth_date": birth_date, "attended_shifts": attended_shifts})
            await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                                 f"üë®‚Äçüë©‚Äçüëß –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                                 f"üë∂ –†–µ–±–µ–Ω–æ–∫: {child_name}\n"
                                 f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}\n"
                                 f"üèï –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã: {attended_shifts}")
        except Exception:
            await message.answer("‚ö† –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
try:
    data = supabase.table("users").select("*").execute()
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ! –î–∞–Ω–Ω—ã–µ:", data.data)
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:", e)

# üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
